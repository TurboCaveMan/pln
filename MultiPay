// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "./PLN_Token.sol";

contract Multipay {

    address payable public admin;
    address payable public vault;
    address payable public minter;

    address public PLN_address;
    uint public amount_to_mint;

    uint public constant duration = 3650 days;
    uint public First_Era;
    uint public InflationInterval;
    uint public process_fee;

    constructor() {
        admin = payable(msg.sender);
        amount_to_mint = 1000 ether;
        First_Era = block.timestamp + duration;
        InflationInterval = block.timestamp + duration;
        process_fee = 975;
    }

    struct User{
        address payable UserAddress;
        uint fee; 
    }  

//need to set these after constructor called

    function setPLNaddress(address _address_PLN) external{
        require(msg.sender == admin);
        PLN_address = _address_PLN;
    }

    function setVault(address payable _NewVault) external{
        require(msg.sender == admin);
        vault = _NewVault;
    }

    function setMinter(address payable _NewMinter) external{
        require(msg.sender == admin);
        minter = _NewMinter;
    }           

// for future upgrades

    function setAdmin(address payable _NewAdmin) external{
        require(msg.sender == admin);
        admin = _NewAdmin;
    }

    function setProcessFee(uint _NewProcessFee) external{
        require(msg.sender == admin);
        process_fee = _NewProcessFee;
    }

    function changetokenowner(address _NewTokenOwner) external{
        require(msg.sender == admin);
        Plnning Token = Plnning(PLN_address);
        Token.transferOwnership(_NewTokenOwner);
    }

// mint more PLN tokens

    function callmint(address _toAddress, uint amount) private {
        Plnning Token = Plnning(PLN_address);
        Token.mint(_toAddress, amount);
    }

    function set_amount_to_mint(uint _newAmount) external{
        require(msg.sender == admin);

        if(block.timestamp <= First_Era){
            require(_newAmount * 1 ether < amount_to_mint);
            amount_to_mint = _newAmount * 1 ether;

        } else {
            require(_newAmount * 1 ether < amount_to_mint*110/100);
            require(_newAmount * 1 ether > amount_to_mint);
            require(block.timestamp > InflationInterval);            
            amount_to_mint = _newAmount * 1 ether;
            InflationInterval = InflationInterval + 365 days;
        }
    }

    function Pay_Users(User[] calldata _List) external payable {
        require(msg.sender == minter);

        uint _fee;
        uint _totalfee = 0;
        uint _totalpaid = 0;

        User memory Payee;
        
        for(uint i = 0; i < _List.length; i++) {
            Payee = _List[i];
            _fee = Payee.fee * process_fee / 1000;
            _totalpaid = _totalpaid + Payee.fee;
            _totalfee = _totalfee + _fee;

            Payee.UserAddress.transfer(_fee);
            callmint(Payee.UserAddress, amount_to_mint);
        }

        if(msg.value < _totalpaid) {
            revert();
        }

        vault.transfer(_totalpaid-_totalfee);
        callmint(vault, amount_to_mint);
    }
}
