// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "./PLN_Token.sol";

contract Multipay {

    address payable public admin;
    address public PLN_address;
    uint public amount_to_mint;
    uint public constant duration = 3650 days;
    uint public end;
    uint public turning;

    constructor() {
        admin = payable(msg.sender);
        amount_to_mint = 1000 ether;
        end = block.timestamp + duration;
        turning = block.timestamp + duration;
    }

    struct User{
        address payable UserAddress;
        uint fee; 
    }  

    function setPLNaddress(address _address_PLN) external{
        require(msg.sender == admin);
        PLN_address = _address_PLN;
    }

    function setAdmin(address payable _NewAdmin) external{
        require(msg.sender == admin);
        admin = _NewAdmin;
    }

    function callmint(address _toAddress, uint amount) internal {
        Plnning Token = Plnning(PLN_address);
        Token.mint(_toAddress, amount);
    }

    function set_amount_to_mint(uint _newAmount) external{
        require(msg.sender == admin);

        if(block.timestamp <= end){
            require(_newAmount * 1 ether < amount_to_mint);
            amount_to_mint = _newAmount * 1 ether;

        } else {
            require(_newAmount * 1 ether < amount_to_mint*110/100);
            require(_newAmount * 1 ether > amount_to_mint);
            require(block.timestamp > turning);            
            amount_to_mint = _newAmount * 1 ether;
            turning = turning + 365 days;
        }
    }

    function Pay_Users(User[] calldata _List) external payable {
        uint _paid = 0;
        uint _totalfee = 0;
        uint _fee;
        User memory Payee;
        
        for(uint i = 0; i < _List.length; i++) {
            Payee=_List[i];
            _fee = Payee.fee * 1 ether * 985 / 1000;

            Payee.UserAddress.transfer(_fee);
            _paid = _paid + (Payee.fee * 1 ether);
            _totalfee = _totalfee + _fee;

            callmint(Payee.UserAddress, amount_to_mint);
        }

        if(msg.value < _paid) {
            revert();
        }

        admin.transfer(_paid-_totalfee);
        callmint(admin, amount_to_mint);
        callmint(msg.sender, amount_to_mint);

    }

}

*/
[
  ["0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2","1"], 
  ["0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db","2"]
]
*/

